name: monthly
on:
  schedule:
    - cron: "0 6 1 * *"
  workflow_dispatch:

jobs:
  run-python-script:
    runs-on: ubuntu-latest
    env:
      GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
      DISABLE_UC: "true"
      PAGE_LOAD_STRATEGY: "none"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Cache WebDriverManager
        uses: actions/cache@v4
        with:
          path: ~/.wdm
          key: ${{ runner.os }}-wdm-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-wdm-

      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      # NEW: Use v3 and OAuth client (no auth key)
      - name: Connect to Tailscale (OAuth)
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: "tag:github-runner"
          args: >-
            --exit-node=${{ secrets.TS_EXIT_NODE_IP }}
            --accept-routes
            --accept-dns=false
            --timeout=60s

      # Helpful diagnostics if something goes wrong
      - name: Tailscale status / IP check
        run: |
          set -x
          tailscale status || true
          echo "Runner egress IP (should be exit-node IP):"
          curl -4s https://ifconfig.me || true

      - name: Preflight connectivity (DNS/egress)
        run: |
          set -e
          # Use endpoints that return 204/200 instead of 404 to avoid false negatives
          targets=(
            "https://www.google.com/generate_204"
            "https://www.gstatic.com/generate_204"
            "https://www.googleapis.com/robots.txt"
          )
          ok=0
          for t in "${targets[@]}"; do
            code=$(curl -fsS -o /dev/null -w "%{http_code}" --max-time 10 "$t" || true)
            if [ "$code" = "204" ] || [ "$code" = "200" ]; then ok=$((ok+1)); fi
          done

          if [ "$ok" -ge 1 ]; then
            echo "Connectivity OK via current network (at least one probe succeeded)"
            exit 0
          fi

          echo "Connectivity probes failed; verifying exit-node reachability before changing state"
          # Verify exit-node is reachable; keep Tailscale if it is
          if sudo -E tailscale ping -c 2 "${{ secrets.TS_EXIT_NODE_IP }}" >/dev/null 2>&1; then
            echo "Exit node reachable; keeping Tailscale and continuing"
            exit 0
          fi

          echo "Exit node not reachable; removing exit-node while keeping Tailscale up"
          sudo -E tailscale set --exit-node= --exit-node-allow-lan-access=false || true
          # Final quick probe; continue regardless to avoid tearing down Tailscale for CAPTCHAs
          curl -fsS -o /dev/null --max-time 10 https://www.google.com/generate_204 || true

      - name: Init run log
        run: echo "--- run start $(date -u +'%Y-%m-%dT%H:%M:%SZ') ---" > run.log

      - name: Run Python Script
        timeout-minutes: 120
        run: |
          set -o pipefail
          python app.py 2>&1 | tee -a run.log

      - name: Log egress IP after run
        if: always()
        run: |
          echo "Egress IP post-run:" $(curl -4s https://ifconfig.me || true)

      - name: Upload run log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run-log
          path: run.log
          if-no-files-found: warn

      # Optional: capture tailscaled log if needed
      - name: Dump tailscaled log on failure
        if: failure()
        run: |
          echo "---- tailscaled.log ----"
          cat ~/tailscaled.log || true